import { Hears, InjectBot, Message, On, Start, Update } from 'nestjs-telegraf';
import { Context, Telegraf } from 'telegraf';
import { actionButtons } from './bot.buttons';
import { PrismaService } from 'src/database/prisma.service';

@Update()
export class BotUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly prisma: PrismaService,
  ) {}

  @Start()
  async start(ctx: Context) {
    await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${ctx.from?.first_name}! ‚úã`);
    await ctx.reply(
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Å—ã–ª–∫–∞–º–∏.\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
      actionButtons(),
    );
  }

  @Hears(process.env.BUTTON_GET_ALL)
  async getAll(ctx: Context) {
    const links = await this.prisma.link.findMany();
    await ctx.reply(
      `–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:${links.map((link) => `\nüîó${link.id}: ${link.value}`).join('')}`,
    );
  }

  @Hears(process.env.BUTTON_GET_ONE)
  async getOne(ctx: Context) {
    await ctx.reply(`–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏:`);
  }

  @On('text') async getOneLink(@Message('text') id: string, ctx: Context) {}
}
